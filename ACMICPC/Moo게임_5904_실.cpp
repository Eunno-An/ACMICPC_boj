
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <climits>
#include <cstring>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include<iomanip>

using namespace std;

/*
- endl 대신 '\n' 사용하기
- cin.tie(0) 사용
- 테스트 케이스 있는 문제일 시 전역변수 초기화 신경쓰기
- (A + B + C) % D = ((A + B) % D + C) % D
- 문자열 출력 문제는 정답 문자열 복사해서 코드에 넣기
- 괄호 사용 유의하기
- 문자열은 함수로 넘길 때 const & 잘 사용하기

- 최악의 경우 int 값 초과하는지, 배열 인덱스 초과하는지 확인
- n 범위 확인 (0인 경우), 양수음수 정수소수 확인, 불가케이스 -1 출력 등 확인
- 큰 배열 선언 시 전역선언, 테케 많을 시 초기화, 배열 용량 max N + 5
*/

#define MOD 1000000007
#define INT_MAX 987654321
#define MAX 100005

typedef long long int ll;
typedef pair<int, int> pii;

int N;
// 테스트 케이스 초기화 시
void init()
{

}
int cal_s_k(int k) {
	if (k == 0) {
		return 3;
	}

	return  2 * cal_s_k(k - 1) + k + 3;
}
//k>=1
//S(k) = S(k-1) + m o ... o(o가 k+2개) + S(k-1) = 총 개수 2*S(k-1) + k+3
//무한한 수열 중에 K번쨰 것이 무엇인지를 찾는 문제. 상당히 18222 투에모스 문자열과 비슷한 문제
//이를 구할려면 그 수열의 증가하는 관계에 대한 것을 점화식으로 해야함

//점화식 자체는 재귀를 떠올리면 된다.
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	while (1) {


		init();
		cin >> N;
		string s = "moo";
		ll count = 4;
		ll size = 3;
		while (1) {
			if (size >= N) {
				break;
			}
			size = 2 * size + count;
			count++;
		}
		count -= 1;
		ll before_str;

		before_str = (size - count) / 2;
		if (before_str < N && N <= before_str + count) {
			N -= before_str;
			break;
		}
		else if (before_str >= N) {
			count--;
			size = before_str;
		}
		else {
			N -= (count + before_str);
			count--;
			size = before_str;
		}
	}

	if (N == 1) {
		cout << 'm' << '\n';
	}
	else {
		cout << 'o' << '\n';
	}

	return 0;
}